# TODO: delete, most of this is crap and should be updated

GASP:
#  parent_model: ['simple_WSDT']
  postproc:
    segm_pipeline_type: 'GASP'

MEAN:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mean'
          add_cannot_link_constraints: False

MAXconstr:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'max'
          add_cannot_link_constraints: True
          merge_constrained_edges_at_the_end: True

MEANconstr:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mean'
          add_cannot_link_constraints: True
          merge_constrained_edges_at_the_end: True

SUM:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
      use_logarithmic_weights: True
      run_GASP_kwargs:
        linkage_criteria: 'sum'
        add_cannot_link_constraints: False

SUMconstr:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
      use_logarithmic_weights: True
      run_GASP_kwargs:
        linkage_criteria: 'sum'
        add_cannot_link_constraints: True
        merge_constrained_edges_at_the_end: True

Mutex:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mutex_watershed'
          add_cannot_link_constraints: False
          use_efficient_implementations: False

# This will give the same result, but in practice uses constraints:
Mutex_constr:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mutex_watershed'
          add_cannot_link_constraints: True
          merge_constrained_edges_at_the_end: True
          use_efficient_implementations: False


MutexEfficient:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mutex_watershed'
          use_efficient_implementations: True

# ---------------------------------------
WSDT:
  postproc:
    segm_pipeline_type: 'only_superpixel_generator'
    from_superpixels: True
    superpixel_generator_type: 'WSDT'


# ---------------------------------------


removeLocaliltyConstraints:
  postproc:
    GASP_kwargs:
      set_only_direct_neigh_as_mergeable: False




longRangeEdges:
  postproc:
    use_fragmenter: True

GASP_pix:
  parent_model: ['GASP']
  postproc:
    start_from_given_segm: False
    use_fragmenter: False
    volume_config:
      affinities:
        slicing_config:
          stride:
            A: [12, 7, 600, 600]
            B: [12, 7, 600, 600]
            C: [12, 7, 600, 600]
          window_size:
            A: [None, None, None, None]
            B: [None, None, None, None]
            C: [None, None, None, None]

ignoreGlia:
  postproc:
    WSDT_kwargs:
      boundary_pixels_kwargs:
        # Noise experiments:
        boundary_threshold: 0.5

noise_sups:
  postproc:
    WSDT_kwargs:
      boundary_pixels_kwargs:
        # Noise experiments:
        boundary_threshold: 0.5
        used_offsets: [0, 1, 2, 4, 5, 7, 8, 10, 11]
        offset_weights: [1., 1., 1., 1., 1., 0.9, 0.9, 0.8, 0.8]

full_cremi_superpixels:
  postproc:
    WSDT_kwargs:
      boundary_pixels_kwargs:
        # Noise experiments:
        boundary_threshold: 0.5
        used_offsets: [0, 1, 2, 4, 5, 7, 8, 10, 11]
        offset_weights: [1., 1., 1., 1., 1., 0.9, 0.9, 0.8, 0.8]

embeddings_agglo:
  postproc:
    WSDT_kwargs:
      boundary_pixels_kwargs:
        # Noise experiments:
        boundary_threshold: 0.5
        used_offsets: [0, 1, 2, 3, 4, 5, 8, 10]
        offset_weights: [1., 1., 1., 1., 1., 1., 1., 1.]


simple_WSDT:
  postproc:
    WSDT_kwargs:
      intersect_with_boundary_pixels: False

boundaryPixels_IoU:
  postproc:
    WSDT_kwargs:
      boundary_pixels_kwargs:
        # Noise experiments:
        boundary_threshold: 0.5
        used_offsets: [0, 1, 2, 3, 4]
        offset_weights: [1., 1., 1., 1., 1.]


debug_postproc:
  postproc:
    GASP_kwargs:
        debug: True
#    data_slice:
#      A: ':, 20:25, 200:1230, 200:1230'
#      B: ':, 20:25, 200:1230, 200:1230'
#      C: ':, 20:25, 200:1230, 200:1230'
#      A: ':, 20:32, :, :'
#      B: ':, 20:32, :, :'
#      C: ':, 20:32, :, :'


all_long_range_edges:
  postproc:
    GASP_kwargs:
      probability_long_range_edges: 1.

few_long_rage_edges:
  postproc:
    GASP_kwargs:
      probability_long_range_edges: 0.01

impose_local_attraction:
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          impose_local_attraction: True

only_local_edges:
  postproc:
    GASP_kwargs:
      probability_long_range_edges: 0.
#        used_offsets: [0,1,2]

GAEC:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'sum'
          add_cannot_link_constraints: False
#      extra_runAggl_kwargs:
#        verbose: True
#        printNth: 1000000


GAEC_noLogCosts:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'sum'
          add_cannot_link_constraints: False


MEAN_constr:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mean'
          add_cannot_link_constraints: True


MEAN_constr_logCosts:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mean'
          add_cannot_link_constraints: True

MEAN_logCosts:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mean'
          add_cannot_link_constraints: False

#remove_small:
#  parent_model: ['GASP']
#  postproc:
#    GASP_kwargs:
#        run_GASP_kwargs:
#          remove_small_segments: True
#          small_segments_thresh: 4

MutexWatershed:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'mutex_watershed'
          add_cannot_link_constraints: False

CompleteLinkage:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'min'
          add_cannot_link_constraints: False
#          use_log_costs: False
#          remove_small_segments: True
#          small_segments_thresh: 200

CompleteLinkagePlusCLC:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'min'
          add_cannot_link_constraints: True
#          use_log_costs: False
#          remove_small_segments: True
#          small_segments_thresh: 200

SingleLinkage:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'max'
          add_cannot_link_constraints: False
#          use_log_costs: False
#          remove_small_segments: True
#          small_segments_thresh: 200

SingleLinkagePlusCLC:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'max'
          add_cannot_link_constraints: True
#          use_log_costs: False
#          remove_small_segments: True
#          small_segments_thresh: 200

greedyFixation:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'sum'
          add_cannot_link_constraints: True
#          use_log_costs: True
#      extra_runAggl_kwargs:
#        verbose: True
#        printNth: 1000000

greedyFixation_noLogCosts:
  parent_model: ['GASP']
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'sum'
          add_cannot_link_constraints: True
#          use_log_costs: False

#GASP_sum:
#  parent_model: ['GASP']
#  postproc:
#    GASP_kwargs:
#      probability_long_range_edges: 0.1
#        run_GASP_kwargs:
#          linkage_criteria: 'mean'
#          add_cannot_link_constraints: False
#      extra_runAggl_kwargs:
#        verbose: True
#        printNth: 1000000

smart_noise_exp_merge_allLong_fromSP:
  postproc:
    experiment_name: 'local_merge_noise_exp1'





GASP_DTWS:
  parent_model: ['GASP']
  postproc:
    start_from_given_segm: False
    use_fragmenter: True
    fragmenter: 'WSDT'

GASP_WS:
  parent_model: ['GASP']
  postproc:
    start_from_given_segm: False
    use_fragmenter: True
    fragmenter: 'WS'

GASP_givenSP:
  parent_model: ['GASP']
  postproc:
    start_from_given_segm: True
    use_fragmenter: False




MWS_blockwise:
  parent_model: ['MWS', 'blockwise']
  postproc:
      start_from_given_segm: False
      use_fragmenter: False
      volume_config:
        affinities:
          slicing_config:
            stride:
              A: [12, 1, 600, 600]
              B: [12, 1, 600, 600]
              C: [12, 1, 600, 600]
            window_size:
              A: [None, 3, None, None]
              B: [None, 3, None, None]
              C: [None, 3, None, None]


MWS:
  postproc:
    segm_pipeline_type: 'MWS'


GASP_max:
  postproc:
    segm_pipeline_type: 'GASP'
    GASP_kwargs:
        run_GASP_kwargs:
          linkage_criteria: 'max'

notInvertAffs:
  postproc:
    invert_affinities: False

invertAffs:
  postproc:
    invert_affinities: True

setWSDTLocalOffsets:
  postproc:
    prob_map_kwargs:
      offset_weights: [1.0, 1.0]
      used_offsets: [0, 1]


zeroInit:
  postproc:
    GASP_kwargs:
        zero_init: True

initSignedWeights:
  postproc:
    GASP_kwargs:
        initSignedWeights: True

sizeReg:
  postproc:
    GASP_kwargs:
        run_GASP_kwargs:
          sizeRegularizer: 0.01

stride10:
  parent_model: 'MWS'
  postproc:
    MWS_kwargs:
#      bias: 0. # 1.0 merge everything, 0.0 split everything (or all that is possible)
      stride:
        - 1
        - 10
        - 10
stride8:
  parent_model: 'MWS'
  postproc:
    MWS_kwargs:
      stride:
        - 1
        - 8
        - 8

use_fragmenter:
  postproc:
    use_fragmenter: True

multicut:
  postproc:
    segm_pipeline_type: 'multicut'

multicut_exact:
  parent_model: ['multicut']
  postproc:
    multicut_kwargs:
      solver_type: 'multicutIlpCplex'
#      beta: 0.9 # 1.0 split everything, 0.0 merge everything

multicut_kerLin:
  parent_model: ['multicut']
  postproc:
    multicut_kwargs:
      solver_type: 'kernighanLin'

multicut_givenSP:
  parent_model: ['multicut', 'given_SP']

given_SP:
  postproc:
    start_from_given_segm: True
    use_fragmenter: False

blockwise:
  postproc:
    blockwise: True
    blockwise_kwargs:
      crop_padding: True
#      nb_parallel_blocks: 20
      num_workers: 1

8_blocks:
  parent_model: ['blockwise']
  postproc:
    blockwise_kwargs:
      nb_parallel_blocks: 8

1_blocks:
  parent_model: ['blockwise']
  postproc:
    blockwise_kwargs:
      nb_parallel_blocks: 1
2_blocks:
  parent_model: ['blockwise']
  postproc:
    blockwise_kwargs:
      nb_parallel_blocks: 2



12_blocks:
  parent_model: ['blockwise']
  postproc:
    blockwise_kwargs:
      nb_parallel_blocks: 12

20_blocks:
  parent_model: ['blockwise']
  postproc:
    blockwise_kwargs:
      nb_parallel_blocks: 20

24_blocks:
  parent_model: ['blockwise']
  postproc:
    blockwise_kwargs:
      nb_parallel_blocks: 24



crop_train:
  postproc:
    data_slice:
      A: ':, :, 100:-100, 100:-100'
      B: ':, :, 100:1330, 665:1750'
      C: ':, :, 150:-150, 150:-150'

crop_padded_affs:
  postproc:
    data_slice:
      A: ':, 6:20, 120:-120, 120:-120'
      B: ':, 6:20, 120:-120, 120:-120'
      C: ':, 6:20, 120:-120, 120:-120'




longRangeProbMap:
  postproc:
    prob_map_kwargs:
      offset_weights: [1.0, 1.0, 0.9, 0.9, 0.88, 0.88]
      used_offsets: [1, 2, 7, 8, 15, 16]


